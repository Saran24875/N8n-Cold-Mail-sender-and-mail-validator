{"createdAt":"2025-07-24T09:36:13.265Z","updatedAt":"2025-09-08T08:03:05.000Z","id":"ovTv5uETyHiKBaAE","name":"SARAN - MAIL SENDER PROJECT","active":true,"isArchived":false,"nodes":[{"parameters":{"rule":{"interval":[{"triggerAtHour":9}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[-2704,-5664],"id":"8ef814dc-4036-4508-8d33-d30e570168e5","name":"Trigger for 9 AM daily"},{"parameters":{"documentId":{"__rl":true,"value":"1nXeLu1L8ZKrCfk_qk3tVuIFhNnB10kypmm_ZxR5i6hY","mode":"list","cachedResultName":"MAILS","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1nXeLu1L8ZKrCfk_qk3tVuIFhNnB10kypmm_ZxR5i6hY/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":1470251620,"mode":"list","cachedResultName":"CHECKED","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1nXeLu1L8ZKrCfk_qk3tVuIFhNnB10kypmm_ZxR5i6hY/edit#gid=1470251620"},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.6,"position":[-2256,-5664],"id":"65b6ed04-6cb0-4dfc-8574-d86367949746","name":"Take all the Checked Mails","credentials":{"googleSheetsOAuth2Api":{"id":"3cp30WIErHf55kdG","name":"Google Sheets account 3"}}},{"parameters":{"jsCode":"const batchSize = 500;\nconst today = new Date();\nconst startDate = new Date('2025-07-31');\nconst dayDiff = Math.floor((today - startDate) / (1000 * 60 * 60 * 24));\nconst start = dayDiff * batchSize;\nconst end = start + batchSize;\n\nreturn items.slice(start, end);\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2032,-5664],"id":"5a0b22fa-3b7a-473c-9737-f701ca9461a5","name":"Code – To fetch 500 emails continuously"},{"parameters":{"promptType":"define","text":"=Determine if this message is an automatic reply or a human-written message.\n\nMessage:\n{{ $json.html }}\n\nRespond with only one word: \"auto\" or \"human\".\n","batching":{}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[432,-6160],"id":"c9f89849-4206-47ab-bb06-bead3f18e27f","name":"Basic LLM Chain2"},{"parameters":{"model":"deepseek/deepseek-r1:free","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[528,-5936],"id":"66bce8cb-325e-47f1-8ffe-fb9d635dd458","name":"OpenRouter Chat Model2","credentials":{"openRouterApi":{"id":"Ty68Y1aUvkgNkROx","name":"SARAN - CHAIN 3"}}},{"parameters":{"options":{"reset":false}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[-1360,-5664],"id":"426b4d69-e7e7-4e6b-9281-ff21943394d7","name":"Loop to send mail one by one1"},{"parameters":{"amount":1.06,"unit":"minutes"},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-1136,-5664],"id":"07fe7340-ecd8-4c7a-9dff-def924018207","name":"Delay between one mail to another1","webhookId":"05e67d3c-19af-49f4-a992-2530477fa0f1"},{"parameters":{"sendTo":"={{ $('Take all the Checked Mails').item.json.address }}","subject":"Hello Guys","message":"={{ $('Get row(s) in sheet').item.json.DAY_1 }}","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[-912,-5664],"id":"8419547c-1ea3-43f7-9035-01076cf84a69","name":"Sending first mail1","webhookId":"b9cce455-f9f2-4d7f-bebc-edddde44c29b","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{"unit":"days"},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-912,-5904],"id":"92c6e55c-863c-49fb-84dc-134dc2d7500c","name":"Sleep for 5 days after the fist message sent1","webhookId":"69310d1d-0916-4e3c-be80-885a9182b971"},{"parameters":{"jsCode":"const fiveDaysAgo = new Date();\nfiveDaysAgo.setDate(fiveDaysAgo.getDate() - 5);\nreturn [\n  {\n    json: {\n      receivedAfter: fiveDaysAgo.toISOString(),\n    },\n  },\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-688,-5904],"id":"a12a9757-92a2-42c9-90e4-be73bb48b248","name":"Suppoting code for the next note give the todays date1"},{"parameters":{"operation":"getAll","returnAll":true,"simple":false,"filters":{"receivedAfter":"={{ $('Suppoting code for the next note give the todays date1').item.json.receivedAfter }}"},"options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[-464,-5904],"id":"f28099c2-ea7b-409d-8645-478c50a3dfbc","name":"Get the last 5 days mails1","webhookId":"2d76d04c-5d2f-4b99-a430-eedc80142f21","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{"jsCode":"// Get static data store\nconst data = $getWorkflowStaticData('global');\n\n// Initialize if not yet set\ndata.results = data.results || [];\n\n// Push current mail metadata\ndata.results.push({\n  id: $json.id,\n  threadId: $json.threadId,\n  labelIds: ($json.labelIds || []).join(', ')\n});\n\nreturn items;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-688,-5584],"id":"c1b9be64-e7bc-4c21-ba89-ef4f4837e940","name":"Collect the thread ID of the current iteration1"},{"parameters":{"jsCode":"const threadIds = items.map(item => item.json.threadId);\n\nreturn [{\n  json: {\n    allThreadIds: threadIds\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1136,-5904],"id":"de4d3ddd-b965-43d9-a8a1-cc4d61255ebb","name":"Collect all the thread IDs after all the mails sent1"},{"parameters":{"unit":"days"},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[1728,-5904],"id":"57a87f2f-ef96-48e6-9dea-1bf562ef1104","name":"Sleep for 5 days after the fist message sent4","webhookId":"69310d1d-0916-4e3c-be80-885a9182b971"},{"parameters":{"jsCode":"const fiveDaysAgo = new Date();\nfiveDaysAgo.setDate(fiveDaysAgo.getDate() - 5);\nreturn [\n  {\n    json: {\n      receivedAfter: fiveDaysAgo.toISOString(),\n    },\n  },\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1952,-5904],"id":"a3ca79ac-17a7-439d-8a8f-e20473603c9a","name":"Suppoting code for the next note give the todays date4"},{"parameters":{"jsCode":"const allThreadIds = items.map(item => item.json.threadId);\n\nreturn [\n  {\n    json: {\n      allThreadIds\n    }\n  }\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1504,-5904],"id":"1b2a81c2-a589-48cf-8a75-f42375297f07","name":"Collect all the thread IDs form the merge1"},{"parameters":{"promptType":"define","text":"=Determine if this message is an automatic reply or a human-written message.\n\nMessage:\n{{ $json.html }}\n\nRespond with only one word: \"auto\" or \"human\".\n","batching":{}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[3072,-6160],"id":"c61e320d-9647-4183-abc1-be0e7ba34103","name":"Basic LLM Chain3"},{"parameters":{"model":"deepseek/deepseek-r1:free","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[3168,-5936],"id":"bcb271a4-6f6e-4c02-afe0-f63a2ba90211","name":"OpenRouter Chat Model3","credentials":{"openRouterApi":{"id":"Ty68Y1aUvkgNkROx","name":"SARAN - CHAIN 3"}}},{"parameters":{"sendTo":"={{ $('Take the replay mails').item.json.from.value[0].address }}","subject":"=Tesing mail","message":"={{ $item(0).$node[\"Get row(s) in sheet\"].json[\"DAY_10\"] }}\n","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[3696,-6064],"id":"d1c4861c-130f-43a6-ba0d-c12ddc8d46f5","name":"Send a message1","webhookId":"0c3b9c45-5bd7-41b4-a5f5-fffece2af64a","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{"sendTo":"={{ $json.to.value[0].address }}","subject":"=Tesing mail","message":"={{ $item(0).$node[\"Get row(s) in sheet\"].json[\"DAY_10\"] }}\n","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[3696,-5760],"id":"bd8df55d-8ea9-490a-b0be-c594ffbe4c5a","name":"Send a message8","webhookId":"0c3b9c45-5bd7-41b4-a5f5-fffece2af64a","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{"assignments":{"assignments":[{"id":"f3f27b37-b961-4c18-b816-917e18fe65dd","name":"Flow","value":"1","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1808,-5664],"id":"4bf1d395-1970-4c58-a1c2-2b01015f5de2","name":"Folw Controler"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.Flow }}","rightValue":"1","operator":{"type":"string","operation":"equals"},"id":"c8309086-e40d-4487-b983-3ca28355a9ff"}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"6c209066-5414-4928-a5bd-7285c1608a97","leftValue":"={{ $json.Flow }}","rightValue":"2","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"2669f685-51d8-47d0-a4ff-7104eb47b72e","leftValue":"={{ $json.Flow }}","rightValue":"3","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[-1584,-5680],"id":"5c97813a-a3b4-4588-b259-45e95a30aa37","name":"Path changer"},{"parameters":{"jsCode":"// Get the thread IDs of sent mails (from the earlier node)\nconst sentThreadIds = $items(\"Collect all the thread IDs after all the mails sent1\", 0).map(item => item.json.allThreadIds).flat();\n\n// Count how many times each threadId appears (from Gmail fetch)\nconst threadIdCounts = {};\nfor (const item of items) {\n  const id = item.json.threadId;\n  if (sentThreadIds.includes(id)) {\n    threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n  }\n}\n\n// Return mails where threadId appears more than once — meaning replied\nconst repliedMails = items.filter(item => {\n  const id = item.json.threadId;\n  return sentThreadIds.includes(id) && threadIdCounts[id] > 1;\n});\n\nreturn repliedMails;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-16,-6064],"id":"61b5f951-2383-4c63-9e04-5ecaf1bd808e","name":"Correct the filtering of the current session thread IDs."},{"parameters":{"jsCode":"// Step 1: Count how many times each threadId appears\nconst threadIdCounts = {};\n\nfor (const item of items) {\n  const id = item.json.threadId;\n  threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n}\n\n// Step 2: Return only items where threadId appears more than once\nconst duplicateThreadItems = items.filter(item => {\n  const id = item.json.threadId;\n  return threadIdCounts[id] > 1;\n});\n\nreturn duplicateThreadItems;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-240,-6064],"id":"55cdf636-a8a0-4b92-8cc5-5a5d5ceb600c","name":"Take All the replied mails1"},{"parameters":{"jsCode":"// Step 1: Count occurrences\nconst threadIdCounts = {};\n\nfor (const item of items) {\n  const id = item.json.threadId;\n  threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n}\n\n// Log counts (to debug)\nconsole.log(\"Thread ID counts:\", threadIdCounts);\n\n// Step 2: Remove all items with duplicate threadIds\nconst filteredItems = items.filter(item => {\n  const id = item.json.threadId;\n  return threadIdCounts[id] === 1; // Keep only unique ones\n});\n\nreturn filteredItems;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[528,-5760],"id":"c3d47ddf-3a06-4235-bfbf-78987453d93b","name":"Take All the non replied mails"},{"parameters":{"jsCode":"// Get the thread IDs of sent mails\nconst sentThreadIds = $items(\"Collect all the thread IDs after all the mails sent1\", 0).map(item => item.json.allThreadIds).flat();\n\n// Count how many times each threadId appears\nconst threadIdCounts = {};\nfor (const item of items) {\n  const id = item.json.threadId;\n  if (sentThreadIds.includes(id)) {\n    threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n  }\n}\n\n// Return mails where threadId appears only once — meaning not replied\nconst nonRepliedMails = items.filter(item => {\n  const id = item.json.threadId;\n  return sentThreadIds.includes(id) && threadIdCounts[id] === 1;\n});\n\nreturn nonRepliedMails;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[832,-5760],"id":"19b41e57-37b5-47de-a6e8-28892610f491","name":"Correct the filtering of the current session thread IDs.1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"87f099a6-3070-45d5-a34c-3c3a552bea86","leftValue":"={{ $json.subject }}","rightValue":"=Re: Hello Guys","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[208,-6064],"id":"28e33e9a-77c9-4175-958d-a6a577d13d41","name":"Take the Mail"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"d392ab9b-cfd8-459f-89ce-8aa2bb1a3fa1","leftValue":"={{ $json.text }}","rightValue":"human","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[832,-6064],"id":"cfe51132-54dc-480a-aa57-7dcbfadda5e7","name":"Human or auto"},{"parameters":{"sendTo":"={{ $('Take the Mail').item.json.from.value[0].address }}","subject":"=Tesing mail","message":"={{ $item(0).$node[\"Get row(s) in sheet\"].json[\"DAY_5\"] }}","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[1056,-6064],"id":"8780e866-01f0-4dac-9187-66ffa760398a","name":"Send message to the auto replay mails","webhookId":"0c3b9c45-5bd7-41b4-a5f5-fffece2af64a","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{"sendTo":"={{ $json.to.value[0].address }}","subject":"=Tesing mail","message":"={{ $item(0).$node[\"Get row(s) in sheet\"].json[\"DAY_5\"] }}\n","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[1056,-5760],"id":"a36ac8b8-8bca-4207-9155-d5823485c5b4","name":"Send mail to Non-replay mails","webhookId":"0c3b9c45-5bd7-41b4-a5f5-fffece2af64a","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[1280,-5904],"id":"5d3e9721-b9a8-4b9a-90b3-805189c027d0","name":"Append the path"},{"parameters":{"operation":"getAll","returnAll":true,"simple":false,"filters":{"receivedAfter":"={{ $json.receivedAfter }}"},"options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[2176,-5904],"id":"09fbeab3-d3c4-48a0-954f-bb088b92b0bb","name":"Get the last 5 days mails after 5 days form the 1st mail","webhookId":"2d76d04c-5d2f-4b99-a430-eedc80142f21","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{"jsCode":"// Step 1: Count how many times each threadId appears\nconst threadIdCounts = {};\n\nfor (const item of items) {\n  const id = item.json.threadId;\n  threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n}\n\n// Step 2: Return only items where threadId appears more than once\nconst duplicateThreadItems = items.filter(item => {\n  const id = item.json.threadId;\n  return threadIdCounts[id] > 1;\n});\n\nreturn duplicateThreadItems;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2400,-6064],"id":"aad189bc-87cf-40a1-854b-36809d3b869e","name":"Take all the replied mails"},{"parameters":{"jsCode":"// Step 1: Count occurrences\nconst threadIdCounts = {};\n\nfor (const item of items) {\n  const id = item.json.threadId;\n  threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n}\n\n// Log counts (to debug)\nconsole.log(\"Thread ID counts:\", threadIdCounts);\n\n// Step 2: Remove all items with duplicate threadIds\nconst filteredItems = items.filter(item => {\n  const id = item.json.threadId;\n  return threadIdCounts[id] === 1; // Keep only unique ones\n});\n\nreturn filteredItems;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3168,-5760],"id":"bce82bcc-0b1f-4e4d-95a9-7ce9b4d5900b","name":"Take All  the non replied mails"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"d392ab9b-cfd8-459f-89ce-8aa2bb1a3fa1","leftValue":"={{ $json.text }}","rightValue":"human","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[3472,-6064],"id":"4361e569-6bb6-4180-a44c-4ca99eaeac11","name":"Human or auto batch 2"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"87f099a6-3070-45d5-a34c-3c3a552bea86","leftValue":"={{ $json.subject }}","rightValue":"=Re: Hello Guys","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[2848,-6064],"id":"8ded6e3e-e131-4500-9747-c95124e3c3e6","name":"Take the replay mails"},{"parameters":{"jsCode":"// Get the thread IDs of sent mails (from the earlier node)\nconst sentThreadIds = $items(\"Collect all the thread IDs form the merge1\", 0).map(item => item.json.allThreadIds).flat();\n\n// Count how many times each threadId appears (from Gmail fetch)\nconst threadIdCounts = {};\nfor (const item of items) {\n  const id = item.json.threadId;\n  if (sentThreadIds.includes(id)) {\n    threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n  }\n}\n\n// Return mails where threadId appears more than once — meaning replied\nconst repliedMails = items.filter(item => {\n  const id = item.json.threadId;\n  return sentThreadIds.includes(id) && threadIdCounts[id] > 1;\n});\n\nreturn repliedMails;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2624,-6064],"id":"fe69d88e-7f87-47fe-b50c-1d72b7cdcdef","name":"Correct the filtering of the current session thread IDs"},{"parameters":{"jsCode":"// Get the thread IDs of sent mails\nconst sentThreadIds = $items(\"Collect all the thread IDs form the merge1\", 0).map(item => item.json.allThreadIds).flat();\n\n// Count how many times each threadId appears\nconst threadIdCounts = {};\nfor (const item of items) {\n  const id = item.json.threadId;\n  if (sentThreadIds.includes(id)) {\n    threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n  }\n}\n\n// Return mails where threadId appears only once — meaning not replied\nconst nonRepliedMails = items.filter(item => {\n  const id = item.json.threadId;\n  return sentThreadIds.includes(id) && threadIdCounts[id] === 1;\n});\n\nreturn nonRepliedMails;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3472,-5760],"id":"be93777c-6afd-4cfd-a06c-ad5adf155d03","name":"Correct the filtering of the current session thread IDs - batch 2 non replay"},{"parameters":{},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[3920,-5904],"id":"aec07643-64bc-43b8-bddc-4ab1a90a1b95","name":"Append the path1"},{"parameters":{"promptType":"define","text":"=Determine if this message is an automatic reply or a human-written message.\n\nMessage:\n{{ $json.html }}\n\nRespond with only one word: \"auto\" or \"human\".\n","batching":{}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[432,-6752],"id":"2bdf1ce6-03b7-4e30-8299-7476ed212dc1","name":"Basic LLM Chain"},{"parameters":{"model":"deepseek/deepseek-r1:free","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[528,-6528],"id":"72367368-1822-4efc-85b0-76c71d5c2441","name":"OpenRouter Chat Model","credentials":{"openRouterApi":{"id":"Ty68Y1aUvkgNkROx","name":"SARAN - CHAIN 3"}}},{"parameters":{"options":{"reset":false}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[-1360,-6256],"id":"2f462eec-3a01-4180-bb94-29e6e31b900b","name":"Loop to send mail one by one"},{"parameters":{"amount":1.06,"unit":"minutes"},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-1136,-6256],"id":"eb309940-700f-4d86-871f-e35484721ddf","name":"Delay between one mail to another","webhookId":"05e67d3c-19af-49f4-a992-2530477fa0f1"},{"parameters":{"sendTo":"={{ $('Take all the Checked Mails').item.json.address }}","subject":"Hello Guys","message":"{{ $('Get row(s) in sheet').item.json.DAY_1 }}","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[-912,-6256],"id":"c7aec7f8-30be-48cc-b4a5-c404e1901b5b","name":"Sending first mail","webhookId":"b9cce455-f9f2-4d7f-bebc-edddde44c29b","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{"unit":"days"},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-912,-6496],"id":"a0f18f37-ad48-4a7c-b692-bbf73efbe5f3","name":"Sleep for 5 days after the fist message sent","webhookId":"69310d1d-0916-4e3c-be80-885a9182b971"},{"parameters":{"jsCode":"const fiveDaysAgo = new Date();\nfiveDaysAgo.setDate(fiveDaysAgo.getDate() - 5);\nreturn [\n  {\n    json: {\n      receivedAfter: fiveDaysAgo.toISOString(),\n    },\n  },\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-688,-6496],"id":"6cc5c101-aff8-49fd-83aa-08440f3c059c","name":"Suppoting code for the next note give the todays date"},{"parameters":{"operation":"getAll","returnAll":true,"simple":false,"filters":{"receivedAfter":"={{ $('Suppoting code for the next note give the todays date').item.json.receivedAfter }}"},"options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[-464,-6496],"id":"d7c5ac52-9a44-4bde-a9fa-0cb9808bdfcd","name":"Get the last 5 days mails","webhookId":"2d76d04c-5d2f-4b99-a430-eedc80142f21","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{"jsCode":"// Get static data store\nconst data = $getWorkflowStaticData('global');\n\n// Initialize if not yet set\ndata.results = data.results || [];\n\n// Push current mail metadata\ndata.results.push({\n  id: $json.id,\n  threadId: $json.threadId,\n  labelIds: ($json.labelIds || []).join(', ')\n});\n\nreturn items;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-688,-6176],"id":"e67153ac-d6eb-4cdc-9838-1d09ccd0b425","name":"Collect the thread ID of the current iteration"},{"parameters":{"jsCode":"const threadIds = items.map(item => item.json.threadId);\n\nreturn [{\n  json: {\n    allThreadIds: threadIds\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1136,-6496],"id":"a4e156e6-fabb-4efe-9489-8824c99a0654","name":"Collect all the thread IDs after all the mails sent"},{"parameters":{"unit":"days"},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[1728,-6496],"id":"20716539-e82f-4b73-a60e-30e9ebefef1d","name":"Sleep for 5 days after the fist message sent5","webhookId":"69310d1d-0916-4e3c-be80-885a9182b971"},{"parameters":{"jsCode":"const fiveDaysAgo = new Date();\nfiveDaysAgo.setDate(fiveDaysAgo.getDate() - 5);\nreturn [\n  {\n    json: {\n      receivedAfter: fiveDaysAgo.toISOString(),\n    },\n  },\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1952,-6496],"id":"754c20e1-7a3a-42ab-8749-5ed8b2a989e4","name":"Suppoting code for the next note give the todays date5"},{"parameters":{"jsCode":"const allThreadIds = items.map(item => item.json.threadId);\n\nreturn [\n  {\n    json: {\n      allThreadIds\n    }\n  }\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1504,-6496],"id":"41344ffa-5c15-428e-a2c6-1a552cdd5ef3","name":"Collect all the thread IDs form the merge"},{"parameters":{"promptType":"define","text":"=Determine if this message is an automatic reply or a human-written message.\n\nMessage:\n{{ $json.html }}\n\nRespond with only one word: \"auto\" or \"human\".\n","batching":{}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[3072,-6752],"id":"a3036c0b-4537-462a-9e3b-2e3e9e7c9a43","name":"Basic LLM Chain4"},{"parameters":{"model":"deepseek/deepseek-r1:free","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[3168,-6528],"id":"0bbf7b52-b738-425c-9c92-2ba3187d085f","name":"OpenRouter Chat Model4","credentials":{"openRouterApi":{"id":"Ty68Y1aUvkgNkROx","name":"SARAN - CHAIN 3"}}},{"parameters":{"sendTo":"={{ $('Take the replay mails1').item.json.from.value[0].address }}","subject":"=Tesing mail","message":"={{ $item(0).$node[\"Get row(s) in sheet\"].json[\"DAY_10\"] }}\n","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[3696,-6656],"id":"ca532f1d-8699-4a42-8ed8-8ba83304c20a","name":"Send a message","webhookId":"0c3b9c45-5bd7-41b4-a5f5-fffece2af64a","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{"sendTo":"={{ $json.to.value[0].address }}","subject":"=Tesing mail","message":"={{ $item(0).$node[\"Get row(s) in sheet\"].json[\"DAY_10\"] }}\n","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[3696,-6352],"id":"7d7ef4f0-5607-47c1-a8dd-518177a25862","name":"Send a message9","webhookId":"0c3b9c45-5bd7-41b4-a5f5-fffece2af64a","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{"jsCode":"// Get the thread IDs of sent mails (from the earlier node)\nconst sentThreadIds = $items(\"Collect all the thread IDs after all the mails sent\", 0).map(item => item.json.allThreadIds).flat();\n\n// Count how many times each threadId appears (from Gmail fetch)\nconst threadIdCounts = {};\nfor (const item of items) {\n  const id = item.json.threadId;\n  if (sentThreadIds.includes(id)) {\n    threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n  }\n}\n\n// Return mails where threadId appears more than once — meaning replied\nconst repliedMails = items.filter(item => {\n  const id = item.json.threadId;\n  return sentThreadIds.includes(id) && threadIdCounts[id] > 1;\n});\n\nreturn repliedMails;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-16,-6656],"id":"6fe5b912-6bd4-4d4d-a421-555705f033fa","name":"Correct the filtering of the current session thread IDs.2"},{"parameters":{"jsCode":"// Step 1: Count how many times each threadId appears\nconst threadIdCounts = {};\n\nfor (const item of items) {\n  const id = item.json.threadId;\n  threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n}\n\n// Step 2: Return only items where threadId appears more than once\nconst duplicateThreadItems = items.filter(item => {\n  const id = item.json.threadId;\n  return threadIdCounts[id] > 1;\n});\n\nreturn duplicateThreadItems;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-240,-6656],"id":"16f98e5b-77ac-48b4-8655-be233eda468c","name":"Take All the replied mails"},{"parameters":{"jsCode":"// Step 1: Count occurrences\nconst threadIdCounts = {};\n\nfor (const item of items) {\n  const id = item.json.threadId;\n  threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n}\n\n// Log counts (to debug)\nconsole.log(\"Thread ID counts:\", threadIdCounts);\n\n// Step 2: Remove all items with duplicate threadIds\nconst filteredItems = items.filter(item => {\n  const id = item.json.threadId;\n  return threadIdCounts[id] === 1; // Keep only unique ones\n});\n\nreturn filteredItems;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[528,-6352],"id":"58ced91f-5ca3-4ff8-874e-fe92d0c65a6d","name":"Take All the non replied mails1"},{"parameters":{"jsCode":"// Get the thread IDs of sent mails\nconst sentThreadIds = $items(\"Collect all the thread IDs after all the mails sent\", 0).map(item => item.json.allThreadIds).flat();\n\n// Count how many times each threadId appears\nconst threadIdCounts = {};\nfor (const item of items) {\n  const id = item.json.threadId;\n  if (sentThreadIds.includes(id)) {\n    threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n  }\n}\n\n// Return mails where threadId appears only once — meaning not replied\nconst nonRepliedMails = items.filter(item => {\n  const id = item.json.threadId;\n  return sentThreadIds.includes(id) && threadIdCounts[id] === 1;\n});\n\nreturn nonRepliedMails;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[832,-6352],"id":"6faacc0e-3e1f-4ea6-ae9a-5ad0f01c9cc7","name":"Correct the filtering of the current session thread IDs.3"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"87f099a6-3070-45d5-a34c-3c3a552bea86","leftValue":"={{ $json.subject }}","rightValue":"=Re: Hello Guys","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[208,-6656],"id":"5f88c726-e5c2-44d0-8e57-2c3f73a16bba","name":"Take the Mail1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"d392ab9b-cfd8-459f-89ce-8aa2bb1a3fa1","leftValue":"={{ $json.text }}","rightValue":"human","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[832,-6656],"id":"517225bb-244f-4718-b684-e6876bcba0c2","name":"Human or auto1"},{"parameters":{"sendTo":"={{ $('Take the Mail1').item.json.from.value[0].address }}","subject":"=Tesing mail","message":"={{ $item(0).$node[\"Get row(s) in sheet\"].json[\"DAY_5\"] }}\n","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[1056,-6656],"id":"a3408bc7-73f6-4ff4-a275-61db818013d3","name":"Send message to the auto replay mails1","webhookId":"0c3b9c45-5bd7-41b4-a5f5-fffece2af64a","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{"sendTo":"={{ $json.to.value[0].address }}","subject":"=Tesing mail","message":"={{ $item(0).$node[\"Get row(s) in sheet\"].json[\"DAY_5\"] }}\n","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[1056,-6352],"id":"f6914ade-e073-4889-8461-4840b8a7c944","name":"Send mail to Non-replay mails1","webhookId":"0c3b9c45-5bd7-41b4-a5f5-fffece2af64a","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[1280,-6496],"id":"b3836ed2-39ad-4c76-9083-2c1371e0ad29","name":"Append the path2"},{"parameters":{"operation":"getAll","returnAll":true,"simple":false,"filters":{"receivedAfter":"={{ $json.receivedAfter }}"},"options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[2176,-6496],"id":"a45d3777-1ed8-4de9-a160-231d4af6684f","name":"Get the last 5 days mails after 5 days form the 1st mail1","webhookId":"2d76d04c-5d2f-4b99-a430-eedc80142f21","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{"jsCode":"// Step 1: Count how many times each threadId appears\nconst threadIdCounts = {};\n\nfor (const item of items) {\n  const id = item.json.threadId;\n  threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n}\n\n// Step 2: Return only items where threadId appears more than once\nconst duplicateThreadItems = items.filter(item => {\n  const id = item.json.threadId;\n  return threadIdCounts[id] > 1;\n});\n\nreturn duplicateThreadItems;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2400,-6656],"id":"65ccba5c-694b-4fd7-98fd-4e262703e9d4","name":"Take all the replied mails1"},{"parameters":{"jsCode":"// Step 1: Count occurrences\nconst threadIdCounts = {};\n\nfor (const item of items) {\n  const id = item.json.threadId;\n  threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n}\n\n// Log counts (to debug)\nconsole.log(\"Thread ID counts:\", threadIdCounts);\n\n// Step 2: Remove all items with duplicate threadIds\nconst filteredItems = items.filter(item => {\n  const id = item.json.threadId;\n  return threadIdCounts[id] === 1; // Keep only unique ones\n});\n\nreturn filteredItems;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3168,-6352],"id":"6a80cb83-ce44-41e0-b55a-6f43d64fac7a","name":"Take All  the non replied mails1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"d392ab9b-cfd8-459f-89ce-8aa2bb1a3fa1","leftValue":"={{ $json.text }}","rightValue":"human","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[3472,-6656],"id":"89a8b7d7-b955-4461-a0ff-324a21d890b5","name":"Human or auto batch "},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"87f099a6-3070-45d5-a34c-3c3a552bea86","leftValue":"={{ $json.subject }}","rightValue":"=Re: Hello Guys","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[2848,-6656],"id":"6e5b0361-e1dd-4ada-97cd-489940f8f5f0","name":"Take the replay mails1"},{"parameters":{"jsCode":"// Get the thread IDs of sent mails (from the earlier node)\nconst sentThreadIds = $items(\"Collect all the thread IDs form the merge\", 0).map(item => item.json.allThreadIds).flat();\n\n// Count how many times each threadId appears (from Gmail fetch)\nconst threadIdCounts = {};\nfor (const item of items) {\n  const id = item.json.threadId;\n  if (sentThreadIds.includes(id)) {\n    threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n  }\n}\n\n// Return mails where threadId appears more than once — meaning replied\nconst repliedMails = items.filter(item => {\n  const id = item.json.threadId;\n  return sentThreadIds.includes(id) && threadIdCounts[id] > 1;\n});\n\nreturn repliedMails;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2624,-6656],"id":"52d95ea8-086b-4ac2-9fe7-f0d54e4b7123","name":"Correct the filtering of the current session thread IDs1"},{"parameters":{"jsCode":"// Get the thread IDs of sent mails\nconst sentThreadIds = $items(\"Collect all the thread IDs form the merge\", 0).map(item => item.json.allThreadIds).flat();\n\n// Count how many times each threadId appears\nconst threadIdCounts = {};\nfor (const item of items) {\n  const id = item.json.threadId;\n  if (sentThreadIds.includes(id)) {\n    threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n  }\n}\n\n// Return mails where threadId appears only once — meaning not replied\nconst nonRepliedMails = items.filter(item => {\n  const id = item.json.threadId;\n  return sentThreadIds.includes(id) && threadIdCounts[id] === 1;\n});\n\nreturn nonRepliedMails;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3472,-6352],"id":"1905ef12-8033-4f57-b2c9-797d94835274","name":"Correct the filtering of the current session thread IDs - batch 2 non replay1"},{"parameters":{},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[3920,-6496],"id":"ad08e44d-f003-4b52-a1df-806f6d4e4bfa","name":"Append the path3"},{"parameters":{"promptType":"define","text":"=Determine if this message is an automatic reply or a human-written message.\n\nMessage:\n{{ $json.html }}\n\nRespond with only one word: \"auto\" or \"human\".\n","batching":{}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[432,-5568],"id":"a023fafc-7022-4585-a0dc-d1f0dfff1643","name":"Basic LLM Chain5"},{"parameters":{"model":"deepseek/deepseek-r1:free","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[528,-5344],"id":"1bffcf12-c7a4-4c36-97ba-bff2afc0bfcf","name":"OpenRouter Chat Model5","credentials":{"openRouterApi":{"id":"Ty68Y1aUvkgNkROx","name":"SARAN - CHAIN 3"}}},{"parameters":{"options":{"reset":false}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[-1360,-5120],"id":"c2658074-c1b4-465f-9bd9-42d4a96d3b82","name":"Loop to send mail one by one2"},{"parameters":{"amount":1.06,"unit":"minutes"},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-1136,-5120],"id":"02a4b5b3-36da-44da-b411-8527a72695ef","name":"Delay between one mail to another2","webhookId":"05e67d3c-19af-49f4-a992-2530477fa0f1"},{"parameters":{"sendTo":"={{ $('Take all the Checked Mails').item.json.address }}","subject":"Hello Guys","message":"{{ $('Get row(s) in sheet').item.json.DAY_1 }}","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[-912,-5120],"id":"211d270f-09aa-4c85-b99d-c4515106d317","name":"Sending first mail2","webhookId":"b9cce455-f9f2-4d7f-bebc-edddde44c29b","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{"unit":"days"},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-912,-5312],"id":"9a366463-6343-4cd5-870b-02c06e2e9386","name":"Sleep for 5 days after the fist message sent2","webhookId":"69310d1d-0916-4e3c-be80-885a9182b971"},{"parameters":{"jsCode":"const fiveDaysAgo = new Date();\nfiveDaysAgo.setDate(fiveDaysAgo.getDate() - 5);\nreturn [\n  {\n    json: {\n      receivedAfter: fiveDaysAgo.toISOString(),\n    },\n  },\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-688,-5312],"id":"9f712b37-6e83-426b-8cc8-fe368c41039b","name":"Suppoting code for the next note give the todays date2"},{"parameters":{"operation":"getAll","returnAll":true,"simple":false,"filters":{"receivedAfter":"={{ $('Suppoting code for the next note give the todays date2').item.json.receivedAfter }}"},"options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[-464,-5312],"id":"d433a097-562b-49d6-81be-e81e6e222b1b","name":"Get the last 5 days mails2","webhookId":"2d76d04c-5d2f-4b99-a430-eedc80142f21","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{"jsCode":"// Get static data store\nconst data = $getWorkflowStaticData('global');\n\n// Initialize if not yet set\ndata.results = data.results || [];\n\n// Push current mail metadata\ndata.results.push({\n  id: $json.id,\n  threadId: $json.threadId,\n  labelIds: ($json.labelIds || []).join(', ')\n});\n\nreturn items;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-688,-5056],"id":"ef3f22b2-efd9-458a-8dd8-cb2f282c79c6","name":"Collect the thread ID of the current iteration2"},{"parameters":{"jsCode":"const threadIds = items.map(item => item.json.threadId);\n\nreturn [{\n  json: {\n    allThreadIds: threadIds\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1136,-5312],"id":"5f1670ea-546f-4dca-8d44-569348ee9099","name":"Collect all the thread IDs after all the mails sent2"},{"parameters":{"unit":"days"},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[1728,-5312],"id":"2b621322-c268-403d-ab8b-a7e1d78e4201","name":"Sleep for 5 days after the fist message sent6","webhookId":"69310d1d-0916-4e3c-be80-885a9182b971"},{"parameters":{"jsCode":"const fiveDaysAgo = new Date();\nfiveDaysAgo.setDate(fiveDaysAgo.getDate() - 5);\nreturn [\n  {\n    json: {\n      receivedAfter: fiveDaysAgo.toISOString(),\n    },\n  },\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1952,-5312],"id":"8aa2b1fd-c9c8-43b4-a94f-6b1c1cce3a14","name":"Suppoting code for the next note give the todays date6"},{"parameters":{"jsCode":"const allThreadIds = items.map(item => item.json.threadId);\n\nreturn [\n  {\n    json: {\n      allThreadIds\n    }\n  }\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1504,-5312],"id":"f810b8b8-39b3-4a51-894d-bc76ef143c81","name":"Collect all the thread IDs form the merge2"},{"parameters":{"promptType":"define","text":"=Determine if this message is an automatic reply or a human-written message.\n\nMessage:\n{{ $json.html }}\n\nRespond with only one word: \"auto\" or \"human\".\n","batching":{}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[3072,-5568],"id":"463bf8a2-67cd-4f56-8048-aa5fd2bd9160","name":"Basic LLM Chain6"},{"parameters":{"model":"deepseek/deepseek-r1:free","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[3168,-5344],"id":"9cbc8858-8bda-4edd-9ee8-3fd60d948f8c","name":"OpenRouter Chat Model6","credentials":{"openRouterApi":{"id":"Ty68Y1aUvkgNkROx","name":"SARAN - CHAIN 3"}}},{"parameters":{"sendTo":"={{ $('Take the replay mails2').item.json.from.value[0].address }}","subject":"=Tesing mail","message":"={{ $item(0).$node[\"Get row(s) in sheet\"].json[\"DAY_10\"] }}\n","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[3696,-5472],"id":"86a2c937-bc85-4ee4-8a10-b444d342eae7","name":"Send a message2","webhookId":"0c3b9c45-5bd7-41b4-a5f5-fffece2af64a","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{"sendTo":"={{ $json.to.value[0].address }}","subject":"=Tesing mail","message":"={{ $item(0).$node[\"Get row(s) in sheet\"].json[\"DAY_10\"] }}\n","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[3696,-5168],"id":"431ff0bd-6bae-4f23-9f1e-9b65ada4f668","name":"Send a message10","webhookId":"0c3b9c45-5bd7-41b4-a5f5-fffece2af64a","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{"jsCode":"// Get the thread IDs of sent mails (from the earlier node)\nconst sentThreadIds = $items(\"Collect all the thread IDs after all the mails sent2\", 0).map(item => item.json.allThreadIds).flat();\n\n// Count how many times each threadId appears (from Gmail fetch)\nconst threadIdCounts = {};\nfor (const item of items) {\n  const id = item.json.threadId;\n  if (sentThreadIds.includes(id)) {\n    threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n  }\n}\n\n// Return mails where threadId appears more than once — meaning replied\nconst repliedMails = items.filter(item => {\n  const id = item.json.threadId;\n  return sentThreadIds.includes(id) && threadIdCounts[id] > 1;\n});\n\nreturn repliedMails;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-16,-5472],"id":"5009f285-9b44-446f-b7bb-0b81dd3a12e7","name":"Correct the filtering of the current session thread IDs.4"},{"parameters":{"jsCode":"// Step 1: Count how many times each threadId appears\nconst threadIdCounts = {};\n\nfor (const item of items) {\n  const id = item.json.threadId;\n  threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n}\n\n// Step 2: Return only items where threadId appears more than once\nconst duplicateThreadItems = items.filter(item => {\n  const id = item.json.threadId;\n  return threadIdCounts[id] > 1;\n});\n\nreturn duplicateThreadItems;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-240,-5472],"id":"0a17cb7e-c4b7-4920-a0ae-22ac364a33d6","name":"Take All the replied mails2"},{"parameters":{"jsCode":"// Step 1: Count occurrences\nconst threadIdCounts = {};\n\nfor (const item of items) {\n  const id = item.json.threadId;\n  threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n}\n\n// Log counts (to debug)\nconsole.log(\"Thread ID counts:\", threadIdCounts);\n\n// Step 2: Remove all items with duplicate threadIds\nconst filteredItems = items.filter(item => {\n  const id = item.json.threadId;\n  return threadIdCounts[id] === 1; // Keep only unique ones\n});\n\nreturn filteredItems;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[528,-5168],"id":"8c2d4a34-f08d-46ec-87e9-16c3db3dcc91","name":"Take All the non replied mails2"},{"parameters":{"jsCode":"// Get the thread IDs of sent mails\nconst sentThreadIds = $items(\"Collect all the thread IDs after all the mails sent2\", 0).map(item => item.json.allThreadIds).flat();\n\n// Count how many times each threadId appears\nconst threadIdCounts = {};\nfor (const item of items) {\n  const id = item.json.threadId;\n  if (sentThreadIds.includes(id)) {\n    threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n  }\n}\n\n// Return mails where threadId appears only once — meaning not replied\nconst nonRepliedMails = items.filter(item => {\n  const id = item.json.threadId;\n  return sentThreadIds.includes(id) && threadIdCounts[id] === 1;\n});\n\nreturn nonRepliedMails;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[832,-5168],"id":"a4ded2c3-603d-4b57-a58a-6319ff9159d7","name":"Correct the filtering of the current session thread IDs.5"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"87f099a6-3070-45d5-a34c-3c3a552bea86","leftValue":"={{ $json.subject }}","rightValue":"=Re: Hello Guys","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[208,-5472],"id":"0aaf50a6-d47d-48d0-963f-13670f72695c","name":"Take the Mail2"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"d392ab9b-cfd8-459f-89ce-8aa2bb1a3fa1","leftValue":"={{ $json.text }}","rightValue":"human","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[832,-5472],"id":"c689915f-94a8-46e1-8ca0-7c3c2ad79277","name":"Human or auto2"},{"parameters":{"sendTo":"={{ $('Take the Mail2').item.json.from.value[0].address }}","subject":"=Tesing mail","message":"={{ $item(0).$node[\"Get row(s) in sheet\"].json[\"DAY_5\"] }}\n","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[1056,-5472],"id":"80179f54-ebba-45b1-88e4-f261a9aa372e","name":"Send message to the auto replay mails2","webhookId":"0c3b9c45-5bd7-41b4-a5f5-fffece2af64a","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{"sendTo":"={{ $json.to.value[0].address }}","subject":"=Tesing mail","message":"={{ $item(0).$node[\"Get row(s) in sheet\"].json[\"DAY_5\"] }}\n","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[1056,-5168],"id":"06187324-cb00-46a7-a5e9-084f95db0c03","name":"Send mail to Non-replay mails2","webhookId":"0c3b9c45-5bd7-41b4-a5f5-fffece2af64a","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[1280,-5312],"id":"12f43ae6-44dd-4e1e-a970-1fc4dd7ad27d","name":"Append the path4"},{"parameters":{"operation":"getAll","returnAll":true,"simple":false,"filters":{"receivedAfter":"={{ $json.receivedAfter }}"},"options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[2176,-5312],"id":"3f27f924-afd1-4301-bcc0-aea37e9e6e61","name":"Get the last 5 days mails after 5 days form the 1st mail2","webhookId":"2d76d04c-5d2f-4b99-a430-eedc80142f21","credentials":{"gmailOAuth2":{"id":"p8PoylxmTN9xmZLQ","name":"Gmail account"}}},{"parameters":{"jsCode":"// Step 1: Count how many times each threadId appears\nconst threadIdCounts = {};\n\nfor (const item of items) {\n  const id = item.json.threadId;\n  threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n}\n\n// Step 2: Return only items where threadId appears more than once\nconst duplicateThreadItems = items.filter(item => {\n  const id = item.json.threadId;\n  return threadIdCounts[id] > 1;\n});\n\nreturn duplicateThreadItems;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2400,-5472],"id":"95308ba8-007c-4201-96b7-5d9ddf3e2249","name":"Take all the replied mails2"},{"parameters":{"jsCode":"// Step 1: Count occurrences\nconst threadIdCounts = {};\n\nfor (const item of items) {\n  const id = item.json.threadId;\n  threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n}\n\n// Log counts (to debug)\nconsole.log(\"Thread ID counts:\", threadIdCounts);\n\n// Step 2: Remove all items with duplicate threadIds\nconst filteredItems = items.filter(item => {\n  const id = item.json.threadId;\n  return threadIdCounts[id] === 1; // Keep only unique ones\n});\n\nreturn filteredItems;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3168,-5168],"id":"9a2a0ec5-1ec2-418d-bd91-971ba384b8b9","name":"Take All  the non replied mails2"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"d392ab9b-cfd8-459f-89ce-8aa2bb1a3fa1","leftValue":"={{ $json.text }}","rightValue":"human","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[3472,-5472],"id":"9ce049ed-d573-449f-a13b-c9e8e7e6a28b","name":"Human or auto batch 3"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"87f099a6-3070-45d5-a34c-3c3a552bea86","leftValue":"={{ $json.subject }}","rightValue":"=Re: Hello Guys","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[2848,-5472],"id":"5f077fdd-1f29-476c-8cfd-b54e872cc3aa","name":"Take the replay mails2"},{"parameters":{"jsCode":"// Get the thread IDs of sent mails (from the earlier node)\nconst sentThreadIds = $items(\"Collect all the thread IDs form the merge2\", 0).map(item => item.json.allThreadIds).flat();\n\n// Count how many times each threadId appears (from Gmail fetch)\nconst threadIdCounts = {};\nfor (const item of items) {\n  const id = item.json.threadId;\n  if (sentThreadIds.includes(id)) {\n    threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n  }\n}\n\n// Return mails where threadId appears more than once — meaning replied\nconst repliedMails = items.filter(item => {\n  const id = item.json.threadId;\n  return sentThreadIds.includes(id) && threadIdCounts[id] > 1;\n});\n\nreturn repliedMails;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2624,-5472],"id":"32cb7f51-908d-4662-9e03-37e616fbec2a","name":"Correct the filtering of the current session thread IDs2"},{"parameters":{"jsCode":"// Get the thread IDs of sent mails\nconst sentThreadIds = $items(\"Collect all the thread IDs form the merge2\", 0).map(item => item.json.allThreadIds).flat();\n\n// Count how many times each threadId appears\nconst threadIdCounts = {};\nfor (const item of items) {\n  const id = item.json.threadId;\n  if (sentThreadIds.includes(id)) {\n    threadIdCounts[id] = (threadIdCounts[id] || 0) + 1;\n  }\n}\n\n// Return mails where threadId appears only once — meaning not replied\nconst nonRepliedMails = items.filter(item => {\n  const id = item.json.threadId;\n  return sentThreadIds.includes(id) && threadIdCounts[id] === 1;\n});\n\nreturn nonRepliedMails;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3472,-5168],"id":"e8b57f13-1aeb-4556-a339-ae0584a3bed0","name":"Correct the filtering of the current session thread IDs - batch 2 non replay2"},{"parameters":{},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[3920,-5312],"id":"16d6fc68-051d-4dc6-a0cb-f58bcaa375d0","name":"Append the path5"},{"parameters":{"documentId":{"__rl":true,"value":"1_PEH5LbxWtwjXayClSx3icB546To6f9caTorPQjl1rQ","mode":"list","cachedResultName":"MESSAGES","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1_PEH5LbxWtwjXayClSx3icB546To6f9caTorPQjl1rQ/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"Sheet1","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1_PEH5LbxWtwjXayClSx3icB546To6f9caTorPQjl1rQ/edit#gid=0"},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.6,"position":[-2480,-5664],"id":"328049da-f77b-4e25-bc16-946e8dfef685","name":"Get row(s) in sheet","credentials":{"googleSheetsOAuth2Api":{"id":"3cp30WIErHf55kdG","name":"Google Sheets account 3"}}}],"connections":{"Trigger for 9 AM daily":{"main":[[{"node":"Get row(s) in sheet","type":"main","index":0}]]},"Take all the Checked Mails":{"main":[[{"node":"Code – To fetch 500 emails continuously","type":"main","index":0}]]},"Code – To fetch 500 emails continuously":{"main":[[{"node":"Folw Controler","type":"main","index":0}]]},"Basic LLM Chain2":{"main":[[{"node":"Human or auto","type":"main","index":0}]]},"OpenRouter Chat Model2":{"ai_languageModel":[[{"node":"Basic LLM Chain2","type":"ai_languageModel","index":0}]]},"Loop to send mail one by one1":{"main":[[{"node":"Collect all the thread IDs after all the mails sent1","type":"main","index":0}],[{"node":"Delay between one mail to another1","type":"main","index":0}]]},"Delay between one mail to another1":{"main":[[{"node":"Sending first mail1","type":"main","index":0}]]},"Sending first mail1":{"main":[[{"node":"Collect the thread ID of the current iteration1","type":"main","index":0}]]},"Sleep for 5 days after the fist message sent1":{"main":[[{"node":"Suppoting code for the next note give the todays date1","type":"main","index":0}]]},"Suppoting code for the next note give the todays date1":{"main":[[{"node":"Get the last 5 days mails1","type":"main","index":0}]]},"Get the last 5 days mails1":{"main":[[{"node":"Take All the replied mails1","type":"main","index":0},{"node":"Take All the non replied mails","type":"main","index":0}]]},"Collect the thread ID of the current iteration1":{"main":[[{"node":"Loop to send mail one by one1","type":"main","index":0}]]},"Collect all the thread IDs after all the mails sent1":{"main":[[{"node":"Sleep for 5 days after the fist message sent1","type":"main","index":0}]]},"Sleep for 5 days after the fist message sent4":{"main":[[{"node":"Suppoting code for the next note give the todays date4","type":"main","index":0}]]},"Suppoting code for the next note give the todays date4":{"main":[[{"node":"Get the last 5 days mails after 5 days form the 1st mail","type":"main","index":0}]]},"Collect all the thread IDs form the merge1":{"main":[[{"node":"Sleep for 5 days after the fist message sent4","type":"main","index":0}]]},"Basic LLM Chain3":{"main":[[{"node":"Human or auto batch 2","type":"main","index":0}]]},"OpenRouter Chat Model3":{"ai_languageModel":[[{"node":"Basic LLM Chain3","type":"ai_languageModel","index":0}]]},"Send a message1":{"main":[[{"node":"Append the path1","type":"main","index":0}]]},"Send a message8":{"main":[[{"node":"Append the path1","type":"main","index":1}]]},"Folw Controler":{"main":[[{"node":"Path changer","type":"main","index":0}]]},"Path changer":{"main":[[{"node":"Loop to send mail one by one","type":"main","index":0}],[{"node":"Loop to send mail one by one1","type":"main","index":0}],[{"node":"Loop to send mail one by one2","type":"main","index":0}]]},"Correct the filtering of the current session thread IDs.":{"main":[[{"node":"Take the Mail","type":"main","index":0}]]},"Take All the replied mails1":{"main":[[{"node":"Correct the filtering of the current session thread IDs.","type":"main","index":0}]]},"Take All the non replied mails":{"main":[[{"node":"Correct the filtering of the current session thread IDs.1","type":"main","index":0}]]},"Correct the filtering of the current session thread IDs.1":{"main":[[{"node":"Send mail to Non-replay mails","type":"main","index":0}]]},"Take the Mail":{"main":[[{"node":"Basic LLM Chain2","type":"main","index":0}]]},"Human or auto":{"main":[[{"node":"Send message to the auto replay mails","type":"main","index":0}]]},"Send message to the auto replay mails":{"main":[[{"node":"Append the path","type":"main","index":0}]]},"Send mail to Non-replay mails":{"main":[[{"node":"Append the path","type":"main","index":1}]]},"Append the path":{"main":[[{"node":"Collect all the thread IDs form the merge1","type":"main","index":0}]]},"Get the last 5 days mails after 5 days form the 1st mail":{"main":[[{"node":"Take all the replied mails","type":"main","index":0},{"node":"Take All  the non replied mails","type":"main","index":0}]]},"Take all the replied mails":{"main":[[{"node":"Correct the filtering of the current session thread IDs","type":"main","index":0}]]},"Take All  the non replied mails":{"main":[[{"node":"Correct the filtering of the current session thread IDs - batch 2 non replay","type":"main","index":0}]]},"Human or auto batch 2":{"main":[[{"node":"Send a message1","type":"main","index":0}]]},"Take the replay mails":{"main":[[{"node":"Basic LLM Chain3","type":"main","index":0}]]},"Correct the filtering of the current session thread IDs":{"main":[[{"node":"Take the replay mails","type":"main","index":0}]]},"Correct the filtering of the current session thread IDs - batch 2 non replay":{"main":[[{"node":"Send a message8","type":"main","index":0}]]},"Basic LLM Chain":{"main":[[{"node":"Human or auto1","type":"main","index":0}]]},"OpenRouter Chat Model":{"ai_languageModel":[[{"node":"Basic LLM Chain","type":"ai_languageModel","index":0}]]},"Loop to send mail one by one":{"main":[[{"node":"Collect all the thread IDs after all the mails sent","type":"main","index":0}],[{"node":"Delay between one mail to another","type":"main","index":0}]]},"Delay between one mail to another":{"main":[[{"node":"Sending first mail","type":"main","index":0}]]},"Sending first mail":{"main":[[{"node":"Collect the thread ID of the current iteration","type":"main","index":0}]]},"Sleep for 5 days after the fist message sent":{"main":[[{"node":"Suppoting code for the next note give the todays date","type":"main","index":0}]]},"Suppoting code for the next note give the todays date":{"main":[[{"node":"Get the last 5 days mails","type":"main","index":0}]]},"Get the last 5 days mails":{"main":[[{"node":"Take All the replied mails","type":"main","index":0},{"node":"Take All the non replied mails1","type":"main","index":0}]]},"Collect the thread ID of the current iteration":{"main":[[{"node":"Loop to send mail one by one","type":"main","index":0}]]},"Collect all the thread IDs after all the mails sent":{"main":[[{"node":"Sleep for 5 days after the fist message sent","type":"main","index":0}]]},"Sleep for 5 days after the fist message sent5":{"main":[[{"node":"Suppoting code for the next note give the todays date5","type":"main","index":0}]]},"Suppoting code for the next note give the todays date5":{"main":[[{"node":"Get the last 5 days mails after 5 days form the 1st mail1","type":"main","index":0}]]},"Collect all the thread IDs form the merge":{"main":[[{"node":"Sleep for 5 days after the fist message sent5","type":"main","index":0}]]},"Basic LLM Chain4":{"main":[[{"node":"Human or auto batch ","type":"main","index":0}]]},"OpenRouter Chat Model4":{"ai_languageModel":[[{"node":"Basic LLM Chain4","type":"ai_languageModel","index":0}]]},"Send a message":{"main":[[{"node":"Append the path3","type":"main","index":0}]]},"Send a message9":{"main":[[{"node":"Append the path3","type":"main","index":1}]]},"Correct the filtering of the current session thread IDs.2":{"main":[[{"node":"Take the Mail1","type":"main","index":0}]]},"Take All the replied mails":{"main":[[{"node":"Correct the filtering of the current session thread IDs.2","type":"main","index":0}]]},"Take All the non replied mails1":{"main":[[{"node":"Correct the filtering of the current session thread IDs.3","type":"main","index":0}]]},"Correct the filtering of the current session thread IDs.3":{"main":[[{"node":"Send mail to Non-replay mails1","type":"main","index":0}]]},"Take the Mail1":{"main":[[{"node":"Basic LLM Chain","type":"main","index":0}]]},"Human or auto1":{"main":[[{"node":"Send message to the auto replay mails1","type":"main","index":0}]]},"Send message to the auto replay mails1":{"main":[[{"node":"Append the path2","type":"main","index":0}]]},"Send mail to Non-replay mails1":{"main":[[{"node":"Append the path2","type":"main","index":1}]]},"Append the path2":{"main":[[{"node":"Collect all the thread IDs form the merge","type":"main","index":0}]]},"Get the last 5 days mails after 5 days form the 1st mail1":{"main":[[{"node":"Take all the replied mails1","type":"main","index":0},{"node":"Take All  the non replied mails1","type":"main","index":0}]]},"Take all the replied mails1":{"main":[[{"node":"Correct the filtering of the current session thread IDs1","type":"main","index":0}]]},"Take All  the non replied mails1":{"main":[[{"node":"Correct the filtering of the current session thread IDs - batch 2 non replay1","type":"main","index":0}]]},"Human or auto batch ":{"main":[[{"node":"Send a message","type":"main","index":0}]]},"Take the replay mails1":{"main":[[{"node":"Basic LLM Chain4","type":"main","index":0}]]},"Correct the filtering of the current session thread IDs1":{"main":[[{"node":"Take the replay mails1","type":"main","index":0}]]},"Correct the filtering of the current session thread IDs - batch 2 non replay1":{"main":[[{"node":"Send a message9","type":"main","index":0}]]},"Basic LLM Chain5":{"main":[[{"node":"Human or auto2","type":"main","index":0}]]},"OpenRouter Chat Model5":{"ai_languageModel":[[{"node":"Basic LLM Chain5","type":"ai_languageModel","index":0}]]},"Loop to send mail one by one2":{"main":[[{"node":"Collect all the thread IDs after all the mails sent2","type":"main","index":0}],[{"node":"Delay between one mail to another2","type":"main","index":0}]]},"Delay between one mail to another2":{"main":[[{"node":"Sending first mail2","type":"main","index":0}]]},"Sending first mail2":{"main":[[{"node":"Collect the thread ID of the current iteration2","type":"main","index":0}]]},"Sleep for 5 days after the fist message sent2":{"main":[[{"node":"Suppoting code for the next note give the todays date2","type":"main","index":0}]]},"Suppoting code for the next note give the todays date2":{"main":[[{"node":"Get the last 5 days mails2","type":"main","index":0}]]},"Get the last 5 days mails2":{"main":[[{"node":"Take All the replied mails2","type":"main","index":0},{"node":"Take All the non replied mails2","type":"main","index":0}]]},"Collect the thread ID of the current iteration2":{"main":[[{"node":"Loop to send mail one by one2","type":"main","index":0}]]},"Collect all the thread IDs after all the mails sent2":{"main":[[{"node":"Sleep for 5 days after the fist message sent2","type":"main","index":0}]]},"Sleep for 5 days after the fist message sent6":{"main":[[{"node":"Suppoting code for the next note give the todays date6","type":"main","index":0}]]},"Suppoting code for the next note give the todays date6":{"main":[[{"node":"Get the last 5 days mails after 5 days form the 1st mail2","type":"main","index":0}]]},"Collect all the thread IDs form the merge2":{"main":[[{"node":"Sleep for 5 days after the fist message sent6","type":"main","index":0}]]},"Basic LLM Chain6":{"main":[[{"node":"Human or auto batch 3","type":"main","index":0}]]},"OpenRouter Chat Model6":{"ai_languageModel":[[{"node":"Basic LLM Chain6","type":"ai_languageModel","index":0}]]},"Send a message2":{"main":[[{"node":"Append the path5","type":"main","index":0}]]},"Send a message10":{"main":[[{"node":"Append the path5","type":"main","index":1}]]},"Correct the filtering of the current session thread IDs.4":{"main":[[{"node":"Take the Mail2","type":"main","index":0}]]},"Take All the replied mails2":{"main":[[{"node":"Correct the filtering of the current session thread IDs.4","type":"main","index":0}]]},"Take All the non replied mails2":{"main":[[{"node":"Correct the filtering of the current session thread IDs.5","type":"main","index":0}]]},"Correct the filtering of the current session thread IDs.5":{"main":[[{"node":"Send mail to Non-replay mails2","type":"main","index":0}]]},"Take the Mail2":{"main":[[{"node":"Basic LLM Chain5","type":"main","index":0}]]},"Human or auto2":{"main":[[{"node":"Send message to the auto replay mails2","type":"main","index":0}]]},"Send message to the auto replay mails2":{"main":[[{"node":"Append the path4","type":"main","index":0}]]},"Send mail to Non-replay mails2":{"main":[[{"node":"Append the path4","type":"main","index":1}]]},"Append the path4":{"main":[[{"node":"Collect all the thread IDs form the merge2","type":"main","index":0}]]},"Get the last 5 days mails after 5 days form the 1st mail2":{"main":[[{"node":"Take all the replied mails2","type":"main","index":0},{"node":"Take All  the non replied mails2","type":"main","index":0}]]},"Take all the replied mails2":{"main":[[{"node":"Correct the filtering of the current session thread IDs2","type":"main","index":0}]]},"Take All  the non replied mails2":{"main":[[{"node":"Correct the filtering of the current session thread IDs - batch 2 non replay2","type":"main","index":0}]]},"Human or auto batch 3":{"main":[[{"node":"Send a message2","type":"main","index":0}]]},"Take the replay mails2":{"main":[[{"node":"Basic LLM Chain6","type":"main","index":0}]]},"Correct the filtering of the current session thread IDs2":{"main":[[{"node":"Take the replay mails2","type":"main","index":0}]]},"Correct the filtering of the current session thread IDs - batch 2 non replay2":{"main":[[{"node":"Send a message10","type":"main","index":0}]]},"Get row(s) in sheet":{"main":[[{"node":"Take all the Checked Mails","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","timezone":"Asia/Kolkata","callerPolicy":"workflowsFromSameOwner"},"staticData":{"node:Trigger for 9 AM daily":{"recurrenceRules":[]},"global":{"results":[{"id":"1984f1581add77b4","threadId":"1984f1581add77b4","labelIds":"SENT"},{"id":"1984f167aa1a784f","threadId":"1984f167aa1a784f","labelIds":"SENT"},{"id":"1984f17743d3ab66","threadId":"1984f17743d3ab66","labelIds":"SENT"},{"id":"1984f186d10778f7","threadId":"1984f186d10778f7","labelIds":"SENT"},{"id":"1984f19677bebf2f","threadId":"1984f19677bebf2f","labelIds":"SENT"},{"id":"1984f1a618eccf94","threadId":"1984f1a618eccf94","labelIds":"SENT"},{"id":"1984f1b5a20ab14c","threadId":"1984f1b5a20ab14c","labelIds":"SENT"},{"id":"1984f1c547bf9d37","threadId":"1984f1c547bf9d37","labelIds":"SENT"},{"id":"1984f1d4d8b22d41","threadId":"1984f1d4d8b22d41","labelIds":"SENT"},{"id":"1984f1e46a8fa65a","threadId":"1984f1e46a8fa65a","labelIds":"SENT"},{"id":"1984f1f400f502b8","threadId":"1984f1f400f502b8","labelIds":"SENT"},{"id":"1984f203bd1c1842","threadId":"1984f203bd1c1842","labelIds":"SENT"},{"id":"1984f2132af3b149","threadId":"1984f2132af3b149","labelIds":"SENT"},{"id":"1984f222cd19f60c","threadId":"1984f222cd19f60c","labelIds":"SENT"},{"id":"1984f232724d362a","threadId":"1984f232724d362a","labelIds":"SENT"},{"id":"1984f2420fee333e","threadId":"1984f2420fee333e","labelIds":"SENT"},{"id":"1984f25181dc04c7","threadId":"1984f25181dc04c7","labelIds":"SENT"},{"id":"1984f261366b94fa","threadId":"1984f261366b94fa","labelIds":"SENT"},{"id":"1984f270d3de9c03","threadId":"1984f270d3de9c03","labelIds":"SENT"},{"id":"1984f2807ff1a63f","threadId":"1984f2807ff1a63f","labelIds":"SENT"},{"id":"1984f28fe4756b4d","threadId":"1984f28fe4756b4d","labelIds":"SENT"},{"id":"1984f29f95058d24","threadId":"1984f29f95058d24","labelIds":"SENT"},{"id":"1984f2af3c151a6d","threadId":"1984f2af3c151a6d","labelIds":"SENT"},{"id":"1984f2bed15afb1a","threadId":"1984f2bed15afb1a","labelIds":"SENT"},{"id":"1984f2ce49e59a96","threadId":"1984f2ce49e59a96","labelIds":"SENT"},{"id":"1984f2ddfb1232f7","threadId":"1984f2ddfb1232f7","labelIds":"SENT"},{"id":"1984f2ed996b825b","threadId":"1984f2ed996b825b","labelIds":"SENT"},{"id":"1984f2fd3ca11cbd","threadId":"1984f2fd3ca11cbd","labelIds":"SENT"},{"id":"1984f30ca3b2864a","threadId":"1984f30ca3b2864a","labelIds":"SENT"}]}},"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"a5a1942d-ee9d-44de-9c0a-b3d7b79e3695","triggerCount":1,"shared":[{"createdAt":"2025-07-24T09:36:13.268Z","updatedAt":"2025-07-24T09:36:13.268Z","role":"workflow:owner","workflowId":"ovTv5uETyHiKBaAE","projectId":"WTQM0Nsb5YipcTUX","project":{"createdAt":"2025-07-23T08:31:14.290Z","updatedAt":"2025-07-23T08:32:33.777Z","id":"WTQM0Nsb5YipcTUX","name":"DCXworks Private Limited <admin@dcxworks.com>","type":"personal","icon":null,"description":null,"projectRelations":[{"createdAt":"2025-07-23T08:31:14.290Z","updatedAt":"2025-07-23T08:31:14.290Z","role":"project:personalOwner","userId":"32e5174a-8499-41d4-a7e3-46e06856d4d5","projectId":"WTQM0Nsb5YipcTUX","user":{"createdAt":"2025-07-23T08:31:13.588Z","updatedAt":"2025-09-08T05:13:52.000Z","id":"32e5174a-8499-41d4-a7e3-46e06856d4d5","email":"admin@dcxworks.com","firstName":"DCXworks","lastName":"Private Limited","personalizationAnswers":{"version":"v4","personalization_survey_submitted_at":"2025-07-23T08:32:53.840Z","personalization_survey_n8n_version":"1.103.2","companySize":"<20","companyType":"digital-agency","role":"business-owner","reportedSource":"friend"},"settings":{"userActivated":true,"firstSuccessfulWorkflowId":"OiOxeHtpT13Rj2Hx","userActivatedAt":1753271399817,"easyAIWorkflowOnboarded":true,"dismissedCallouts":{"aiAgentStarterCallout":true,"preBuiltAgentsCalloutHttpRequest":true},"npsSurvey":{"responded":true,"lastShownAt":1755136428381}},"role":"global:owner","disabled":false,"mfaEnabled":false,"lastActiveAt":"2025-09-07","isPending":false}}]}}],"tags":[{"createdAt":"2025-08-10T20:54:49.922Z","updatedAt":"2025-08-10T20:54:49.922Z","id":"9F4rGZqcTpUlg1im","name":"MAIL"},{"createdAt":"2025-08-10T20:54:24.930Z","updatedAt":"2025-08-10T20:54:24.930Z","id":"mbssRmndtj8TnWsJ","name":"SARAN"},{"createdAt":"2025-08-10T20:55:05.383Z","updatedAt":"2025-08-10T20:55:05.383Z","id":"oDhgvZ9MG5PlfYIm","name":"FIST WORKFOLOW"}]}